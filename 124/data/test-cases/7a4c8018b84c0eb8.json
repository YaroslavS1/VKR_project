{
  "uid" : "7a4c8018b84c0eb8",
  "name" : "test_dummy_campaign_crm[10-25.05.2010-25.11.2010]",
  "fullName" : "apps.home.tests_vkr.generator.test_dummy_campaign_crm#test_dummy_campaign_crm",
  "historyId" : "f977ae022305d2bfe110a15f1f529b5b",
  "time" : {
    "start" : 1651871003291,
    "stop" : 1651871003294,
    "duration" : 3
  },
  "status" : "broken",
  "statusMessage" : "ValueError: empty range for randrange() (1, 1, 0)",
  "statusTrace" : "start_date = '25.05.2010', end_date = '25.11.2010', n = 10\n\n    @allure.feature('CRM report')\n    @allure.story('Test of creating CRM report')\n    @pytest.mark.parametrize(\n        'end_date', [\n            '10.10.2010',\n            '25.11.2010',\n            '01.01.2022'\n        ])\n    @pytest.mark.parametrize(\n        'start_date', [\n            '01.10.2010',\n            '25.05.2010',\n            '01.01.2000',\n        ])\n    @pytest.mark.parametrize('n', [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    def test_dummy_campaign_crm(start_date, end_date, n):\n        clicks = []\n        profits = []\n        camaign = []\n        for i in range(n):\n            click = random.randint(0, 10000)\n            profit = random.randint(click, 10000)\n            camaign.append(AdvContextCRM('yandex', f'test_campaign{i}', profit, click))\n            clicks.append(click)\n            profits.append(profit)\n    \n>       report_ = CrmReport(\n            start_date=start_date,\n            end_date=end_date,\n            config=camaign)\n\napps/home/tests_vkr/generator/test_dummy_campaign_crm.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napps/home/tests_vkr/tools/CRM/crm_creator.py:257: in __init__\n    self.records = self.create_records()\napps/home/tests_vkr/tools/CRM/crm_creator.py:347: in create_records\n    data = self._split_by_company\napps/home/tests_vkr/tools/CRM/crm_creator.py:302: in _split_by_company\n    profit_allocation = self._prepare_zero_click(clicks_allocation, i.profit)\napps/home/tests_vkr/tools/CRM/crm_creator.py:271: in _prepare_zero_click\n    separator = random.randint(1, math.floor(l_a/2))\n/opt/hostedtoolcache/Python/3.10.4/x64/lib/python3.10/random.py:370: in randint\n    return self.randrange(a, b+1)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <random.Random object at 0x556560e32e90>, start = 1, stop = 1, step = 1\n\n    def randrange(self, start, stop=None, step=_ONE):\n        \"\"\"Choose a random item from range(start, stop[, step]).\n    \n        This fixes the problem with randint() which includes the\n        endpoint; in Python this is usually not what you want.\n    \n        \"\"\"\n    \n        # This code is a bit messy to make it fast for the\n        # common case while still doing adequate error checking.\n        try:\n            istart = _index(start)\n        except TypeError:\n            istart = int(start)\n            if istart != start:\n                _warn('randrange() will raise TypeError in the future',\n                      DeprecationWarning, 2)\n                raise ValueError(\"non-integer arg 1 for randrange()\")\n            _warn('non-integer arguments to randrange() have been deprecated '\n                  'since Python 3.10 and will be removed in a subsequent '\n                  'version',\n                  DeprecationWarning, 2)\n        if stop is None:\n            # We don't check for \"step != 1\" because it hasn't been\n            # type checked and converted to an integer yet.\n            if step is not _ONE:\n                raise TypeError('Missing a non-None stop argument')\n            if istart > 0:\n                return self._randbelow(istart)\n            raise ValueError(\"empty range for randrange()\")\n    \n        # stop argument supplied.\n        try:\n            istop = _index(stop)\n        except TypeError:\n            istop = int(stop)\n            if istop != stop:\n                _warn('randrange() will raise TypeError in the future',\n                      DeprecationWarning, 2)\n                raise ValueError(\"non-integer stop for randrange()\")\n            _warn('non-integer arguments to randrange() have been deprecated '\n                  'since Python 3.10 and will be removed in a subsequent '\n                  'version',\n                  DeprecationWarning, 2)\n        width = istop - istart\n        try:\n            istep = _index(step)\n        except TypeError:\n            istep = int(step)\n            if istep != step:\n                _warn('randrange() will raise TypeError in the future',\n                      DeprecationWarning, 2)\n                raise ValueError(\"non-integer step for randrange()\")\n            _warn('non-integer arguments to randrange() have been deprecated '\n                  'since Python 3.10 and will be removed in a subsequent '\n                  'version',\n                  DeprecationWarning, 2)\n        # Fast path.\n        if istep == 1:\n            if width > 0:\n                return istart + self._randbelow(width)\n>           raise ValueError(\"empty range for randrange() (%d, %d, %d)\" % (istart, istop, width))\nE           ValueError: empty range for randrange() (1, 1, 0)\n\n/opt/hostedtoolcache/Python/3.10.4/x64/lib/python3.10/random.py:353: ValueError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "feature",
    "value" : "CRM report"
  }, {
    "name" : "story",
    "value" : "Test of creating CRM report"
  }, {
    "name" : "parentSuite",
    "value" : "apps.home.tests_vkr.generator"
  }, {
    "name" : "suite",
    "value" : "test_dummy_campaign_crm"
  }, {
    "name" : "host",
    "value" : "fv-az210-825"
  }, {
    "name" : "thread",
    "value" : "2293-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "apps.home.tests_vkr.generator.test_dummy_campaign_crm"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "end_date",
    "value" : "'25.11.2010'"
  }, {
    "name" : "n",
    "value" : "10"
  }, {
    "name" : "start_date",
    "value" : "'25.05.2010'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 1,
        "skipped" : 0,
        "passed" : 2,
        "unknown" : 0,
        "total" : 3
      },
      "items" : [ {
        "uid" : "19f1f839d302818b",
        "reportUrl" : "https://YaroslavS1.github.io/VKR_project/123//#testresult/19f1f839d302818b",
        "status" : "passed",
        "time" : {
          "start" : 1651870568611,
          "stop" : 1651870570216,
          "duration" : 1605
        }
      }, {
        "uid" : "e468f102b065b31d",
        "reportUrl" : "https://YaroslavS1.github.io/VKR_project/122//#testresult/e468f102b065b31d",
        "status" : "passed",
        "time" : {
          "start" : 1651870201526,
          "stop" : 1651870203697,
          "duration" : 2171
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "7a4c8018b84c0eb8.json",
  "parameterValues" : [ "'25.11.2010'", "10", "'25.05.2010'" ]
}