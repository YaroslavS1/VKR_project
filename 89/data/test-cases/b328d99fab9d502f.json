{
  "uid" : "b328d99fab9d502f",
  "name" : "test_count_summary_cost_ads",
  "fullName" : "vkr_project_tests.test_attach#test_count_summary_cost_ads",
  "historyId" : "510998b91d3f9014f7c6dfe23bddced0",
  "time" : {
    "start" : 1649586031003,
    "stop" : 1649586031398,
    "duration" : 395
  },
  "description" : "Calculation of the total cost of advertising",
  "descriptionHtml" : "<p>Calculation of the total cost of advertising</p>\n",
  "status" : "skipped",
  "statusMessage" : "XFAIL this test is expecting failure\n\nFileNotFoundError: [Errno 2] No such file or directory: 'temp.name'",
  "statusTrace" : "@pytest.mark.xfail(condition=lambda: True, reason='this test is expecting failure')\n    def test_count_summary_cost_ads():\n        \"\"\"Calculation of the total cost of advertising\"\"\"\n        '''\n        суть теста разложить сколько мы заплатили по дням\n        распечатать это\n        и ссумировать\n        '''\n        LOGGER.debug(f'{os. getcwd()}')\n        print(os. getcwd())\n        f_data = pd.read_csv(\"./case/cashe.csv\", header=1, sep='\t', index_col=0, )\n        f_data['Cost'] = pd.to_numeric(f_data[\"Cost\"], downcast='float')\n        f_data['Cost'] = f_data['Cost'] / 1000000\n        summary_cost = float(f_data.groupby('CampaignName').sum().reset_index()['Cost'])\n        f = f_data.groupby('Date').sum().reset_index()\n        trace1 = px.line(\n            x=f['Date'],\n            y=f['Cost'],)\n        # fig.add_trace(trace1, row=1, col=1)\n        # # fig.add_trace(trace2, row=2, col=1)\n        # # fig.add_trace(trace3, row=3, col=1)\n        #\n        # fig.update_layout(xaxis=dict(tickangle=90))\n        temp = tempfile.NamedTemporaryFile()\n        print(temp.name)\n        # fp.write()\n        trace1.write_html(f'{temp.name}')\n>       allure.attach.file('temp.name', attachment_type=allure.attachment_type.HTML)\n\nvkr_project_tests/test_attach.py:40: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.10.4/x64/lib/python3.10/site-packages/allure_commons/_allure.py:182: in file\n    plugin_manager.hook.attach_file(source=source, name=name, attachment_type=attachment_type, extension=extension)\n/opt/hostedtoolcache/Python/3.10.4/x64/lib/python3.10/site-packages/pluggy/_hooks.py:265: in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n/opt/hostedtoolcache/Python/3.10.4/x64/lib/python3.10/site-packages/pluggy/_manager.py:80: in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n/opt/hostedtoolcache/Python/3.10.4/x64/lib/python3.10/site-packages/allure_pytest/listener.py:226: in attach_file\n    self.allure_logger.attach_file(uuid4(), source, name=name, attachment_type=attachment_type, extension=extension)\n/opt/hostedtoolcache/Python/3.10.4/x64/lib/python3.10/site-packages/allure_commons/reporter.py:114: in attach_file\n    plugin_manager.hook.report_attached_file(source=source, file_name=file_name)\n/opt/hostedtoolcache/Python/3.10.4/x64/lib/python3.10/site-packages/pluggy/_hooks.py:265: in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n/opt/hostedtoolcache/Python/3.10.4/x64/lib/python3.10/site-packages/pluggy/_manager.py:80: in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n/opt/hostedtoolcache/Python/3.10.4/x64/lib/python3.10/site-packages/allure_commons/logger.py:53: in report_attached_file\n    shutil.copy2(source, destination)\n/opt/hostedtoolcache/Python/3.10.4/x64/lib/python3.10/shutil.py:434: in copy2\n    copyfile(src, dst, follow_symlinks=follow_symlinks)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsrc = 'temp.name'\ndst = '/home/runner/work/VKR_project/VKR_project/allure-results/0d22b7d2-fd15-4b6d-9836-257ab7fd58c5-attachment.html'\n\n    def copyfile(src, dst, *, follow_symlinks=True):\n        \"\"\"Copy data from src to dst in the most efficient way possible.\n    \n        If follow_symlinks is not set and src is a symbolic link, a new\n        symlink will be created instead of copying the file it points to.\n    \n        \"\"\"\n        sys.audit(\"shutil.copyfile\", src, dst)\n    \n        if _samefile(src, dst):\n            raise SameFileError(\"{!r} and {!r} are the same file\".format(src, dst))\n    \n        file_size = 0\n        for i, fn in enumerate([src, dst]):\n            try:\n                st = _stat(fn)\n            except OSError:\n                # File most likely does not exist\n                pass\n            else:\n                # XXX What about other special files? (sockets, devices...)\n                if stat.S_ISFIFO(st.st_mode):\n                    fn = fn.path if isinstance(fn, os.DirEntry) else fn\n                    raise SpecialFileError(\"`%s` is a named pipe\" % fn)\n                if _WINDOWS and i == 0:\n                    file_size = st.st_size\n    \n        if not follow_symlinks and _islink(src):\n            os.symlink(os.readlink(src), dst)\n        else:\n>           with open(src, 'rb') as fsrc:\nE           FileNotFoundError: [Errno 2] No such file or directory: 'temp.name'\n\n/opt/hostedtoolcache/Python/3.10.4/x64/lib/python3.10/shutil.py:254: FileNotFoundError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "description" : "Calculation of the total cost of advertising",
    "status" : "skipped",
    "statusMessage" : "XFAIL this test is expecting failure\n\nFileNotFoundError: [Errno 2] No such file or directory: 'temp.name'",
    "statusTrace" : "@pytest.mark.xfail(condition=lambda: True, reason='this test is expecting failure')\n    def test_count_summary_cost_ads():\n        \"\"\"Calculation of the total cost of advertising\"\"\"\n        '''\n        суть теста разложить сколько мы заплатили по дням\n        распечатать это\n        и ссумировать\n        '''\n        LOGGER.debug(f'{os. getcwd()}')\n        print(os. getcwd())\n        f_data = pd.read_csv(\"./case/cashe.csv\", header=1, sep='\t', index_col=0, )\n        f_data['Cost'] = pd.to_numeric(f_data[\"Cost\"], downcast='float')\n        f_data['Cost'] = f_data['Cost'] / 1000000\n        summary_cost = float(f_data.groupby('CampaignName').sum().reset_index()['Cost'])\n        f = f_data.groupby('Date').sum().reset_index()\n        trace1 = px.line(\n            x=f['Date'],\n            y=f['Cost'],)\n        # fig.add_trace(trace1, row=1, col=1)\n        # # fig.add_trace(trace2, row=2, col=1)\n        # # fig.add_trace(trace3, row=3, col=1)\n        #\n        # fig.update_layout(xaxis=dict(tickangle=90))\n        temp = tempfile.NamedTemporaryFile()\n        print(temp.name)\n        # fp.write()\n        trace1.write_html(f'{temp.name}')\n>       allure.attach.file('temp.name', attachment_type=allure.attachment_type.HTML)\n\nvkr_project_tests/test_attach.py:40: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.10.4/x64/lib/python3.10/site-packages/allure_commons/_allure.py:182: in file\n    plugin_manager.hook.attach_file(source=source, name=name, attachment_type=attachment_type, extension=extension)\n/opt/hostedtoolcache/Python/3.10.4/x64/lib/python3.10/site-packages/pluggy/_hooks.py:265: in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n/opt/hostedtoolcache/Python/3.10.4/x64/lib/python3.10/site-packages/pluggy/_manager.py:80: in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n/opt/hostedtoolcache/Python/3.10.4/x64/lib/python3.10/site-packages/allure_pytest/listener.py:226: in attach_file\n    self.allure_logger.attach_file(uuid4(), source, name=name, attachment_type=attachment_type, extension=extension)\n/opt/hostedtoolcache/Python/3.10.4/x64/lib/python3.10/site-packages/allure_commons/reporter.py:114: in attach_file\n    plugin_manager.hook.report_attached_file(source=source, file_name=file_name)\n/opt/hostedtoolcache/Python/3.10.4/x64/lib/python3.10/site-packages/pluggy/_hooks.py:265: in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n/opt/hostedtoolcache/Python/3.10.4/x64/lib/python3.10/site-packages/pluggy/_manager.py:80: in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n/opt/hostedtoolcache/Python/3.10.4/x64/lib/python3.10/site-packages/allure_commons/logger.py:53: in report_attached_file\n    shutil.copy2(source, destination)\n/opt/hostedtoolcache/Python/3.10.4/x64/lib/python3.10/shutil.py:434: in copy2\n    copyfile(src, dst, follow_symlinks=follow_symlinks)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsrc = 'temp.name'\ndst = '/home/runner/work/VKR_project/VKR_project/allure-results/0d22b7d2-fd15-4b6d-9836-257ab7fd58c5-attachment.html'\n\n    def copyfile(src, dst, *, follow_symlinks=True):\n        \"\"\"Copy data from src to dst in the most efficient way possible.\n    \n        If follow_symlinks is not set and src is a symbolic link, a new\n        symlink will be created instead of copying the file it points to.\n    \n        \"\"\"\n        sys.audit(\"shutil.copyfile\", src, dst)\n    \n        if _samefile(src, dst):\n            raise SameFileError(\"{!r} and {!r} are the same file\".format(src, dst))\n    \n        file_size = 0\n        for i, fn in enumerate([src, dst]):\n            try:\n                st = _stat(fn)\n            except OSError:\n                # File most likely does not exist\n                pass\n            else:\n                # XXX What about other special files? (sockets, devices...)\n                if stat.S_ISFIFO(st.st_mode):\n                    fn = fn.path if isinstance(fn, os.DirEntry) else fn\n                    raise SpecialFileError(\"`%s` is a named pipe\" % fn)\n                if _WINDOWS and i == 0:\n                    file_size = st.st_size\n    \n        if not follow_symlinks and _islink(src):\n            os.symlink(os.readlink(src), dst)\n        else:\n>           with open(src, 'rb') as fsrc:\nE           FileNotFoundError: [Errno 2] No such file or directory: 'temp.name'\n\n/opt/hostedtoolcache/Python/3.10.4/x64/lib/python3.10/shutil.py:254: FileNotFoundError",
    "steps" : [ ],
    "attachments" : [ {
      "type" : "text/html",
      "size" : 0
    }, {
      "uid" : "11ad7aa56008c1d4",
      "name" : "stdout",
      "source" : "11ad7aa56008c1d4.txt",
      "type" : "text/plain",
      "size" : 59
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 2,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "tag",
    "value" : "@pytest.mark.xfail(condition=<function <lambda> at 0x7f6c3d39c310>, reason='this test is expecting failure')"
  }, {
    "name" : "parentSuite",
    "value" : "vkr_project_tests"
  }, {
    "name" : "suite",
    "value" : "test_attach"
  }, {
    "name" : "host",
    "value" : "fv-az83-21"
  }, {
    "name" : "thread",
    "value" : "2300-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "vkr_project_tests.test_attach"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 0,
        "skipped" : 4,
        "passed" : 0,
        "unknown" : 0,
        "total" : 4
      },
      "items" : [ {
        "uid" : "aad32a1c16c5f9b2",
        "reportUrl" : "https://YaroslavS1.github.io/VKR_project/88//#testresult/aad32a1c16c5f9b2",
        "status" : "skipped",
        "statusDetails" : "XFAIL this test is expecting failure\n\nFileNotFoundError: [Errno 2] No such file or directory: '../case/cashe.csv'",
        "time" : {
          "start" : 1649585828371,
          "stop" : 1649585828372,
          "duration" : 1
        }
      }, {
        "uid" : "a3ad293c5fa92e3b",
        "reportUrl" : "https://YaroslavS1.github.io/VKR_project/87//#testresult/a3ad293c5fa92e3b",
        "status" : "skipped",
        "statusDetails" : "XFAIL this test is expecting failure\n\nFileNotFoundError: [Errno 2] No such file or directory: '../case/cashe.csv'",
        "time" : {
          "start" : 1649585048630,
          "stop" : 1649585048631,
          "duration" : 1
        }
      }, {
        "uid" : "be707adf5fe5d8dd",
        "reportUrl" : "https://YaroslavS1.github.io/VKR_project/86//#testresult/be707adf5fe5d8dd",
        "status" : "skipped",
        "statusDetails" : "XFAIL this test is expecting failure\n\nFileNotFoundError: [Errno 2] No such file or directory: '../case/cashe.csv'",
        "time" : {
          "start" : 1649530694123,
          "stop" : 1649530694125,
          "duration" : 2
        }
      } ]
    },
    "tags" : [ "@pytest.mark.xfail(condition=<function <lambda> at 0x7f6c3d39c310>, reason='this test is expecting failure')" ]
  },
  "source" : "b328d99fab9d502f.json",
  "parameterValues" : [ ]
}